// Generated by CoffeeScript 1.3.3
var Blur, DeferredProbeShadowMap, DeferredShadowMap, DepthRender, Rendernode;

Rendernode = require('/rendernode');

Blur = require('/blur');

exports.DepthRender = DepthRender = (function() {

  function DepthRender(gl, width, height, drawable, light, _arg) {
    var blurred;
    this.light = light;
    blurred = (_arg != null ? _arg : {}).blurred;
    if (blurred == null) {
      blurred = false;
    }
    this.direct = new Rendernode(gl, {
      width: width,
      height: height,
      program: get('depth.shader'),
      drawable: drawable,
      depthBuffer: true,
      depthTest: true,
      depthWrite: true,
      filter: blurred ? 'nearest' : 'linear',
      type: gl.FLOAT
    });
    if (blurred) {
      this.blurred = new Blur(gl, {
        width: width,
        height: height,
        type: gl.FLOAT
      });
    }
    this.output = this.blurred ? this.blurred.output : this.direct;
    this.update();
  }

  DepthRender.prototype.update = function() {
    this.direct.start().clearBoth(0, 0, 0, 1).mat4('proj', this.light.proj).mat4('view', this.light.view).f('range', 42).draw().end();
    if (this.blurred) {
      return this.blurred.update(this.direct);
    }
  };

  return DepthRender;

})();

exports.DeferredShadowMap = DeferredShadowMap = (function() {

  function DeferredShadowMap(gl, _arg) {
    var drawable;
    drawable = _arg.drawable, this.depth = _arg.depth, this.eyeNormaldepth = _arg.eyeNormaldepth, this.light = _arg.light, this.camera = _arg.camera;
    this.output = new Rendernode(gl, {
      program: get('deferred_shadow_map.shader'),
      drawable: quad
    });
  }

  DeferredShadowMap.prototype.resize = function(width, height) {
    this.output.resize(width, height);
    return this;
  };

  DeferredShadowMap.prototype.updateShadow = function() {
    this.output.start().clear(1, 0, 1).sampler('eye_normaldepth', this.eyeNormaldepth).sampler('light_depth', this.depth.output).mat4('inv_eye_proj', this.camera.inv_proj).mat4('inv_eye_view', this.camera.inv_view).mat4('light_view', this.light.view).mat4('light_proj', this.light.proj).mat3('light_rot', this.light.rot).draw().end();
    return this;
  };

  return DeferredShadowMap;

})();

exports.DeferredProbeShadowMap = DeferredProbeShadowMap = (function() {

  function DeferredProbeShadowMap(gl, _arg) {
    var drawable;
    drawable = _arg.drawable, this.depth = _arg.depth, this.probes_normal = _arg.probes_normal, this.probes_position = _arg.probes_position, this.light = _arg.light;
    this.output = new Rendernode(gl, {
      program: get('deferred_probe_shadow_map.shader'),
      drawable: quad
    });
  }

  DeferredProbeShadowMap.prototype.resize = function(width, height) {
    this.output.resize(width, height);
    return this;
  };

  DeferredProbeShadowMap.prototype.updateShadow = function() {
    this.output.start().clear(1, 0, 1).sampler('probes_normal', this.probes_normal).sampler('probes_position', this.probes_position).sampler('light_depth', this.depth.output).mat4('light_view', this.light.view).mat4('light_proj', this.light.proj).mat3('light_rot', this.light.rot).draw().end();
    return this;
  };

  return DeferredProbeShadowMap;

})();
