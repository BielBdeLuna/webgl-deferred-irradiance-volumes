uniform vec2 coefficients_size;
uniform sampler2D coefficients;

vec3 getCoefficient(float index, float m){
    vec2 coord = vec2(m+0.5, index+0.5)/coefficients_size;
    return texture2D(coefficients, coord).rgb;
}

vec3 sphericalHarmonics(float index, vec3 normal){
    float x = normal.x;
    float y = normal.y;
    float z = normal.z;
    
    vec3 l00 = getCoefficient(index, 0.0);
    
    vec3 l10 = getCoefficient(index, 1.0);
    vec3 l11 = getCoefficient(index, 2.0);
    vec3 l12 = getCoefficient(index, 3.0);

    vec3 l20 = getCoefficient(index, 4.0);
    vec3 l21 = getCoefficient(index, 5.0);
    vec3 l22 = getCoefficient(index, 6.0);
    vec3 l23 = getCoefficient(index, 7.0);
    vec3 l24 = getCoefficient(index, 8.0);
    
    vec3 result = (
        l00 +

        l12 * x +
        l10 * y + 
        l11 * z +

        l20 * x*y +
        l21 * y*z +
        l22 * (3.0*z*z - 1.0) +
        l23 * x*z +
        l24 * (x*x - y*y)
    );
    return max(result, vec3(0.0));
}
